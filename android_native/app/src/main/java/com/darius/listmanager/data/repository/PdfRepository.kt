package com.darius.listmanager.data.repository

import android.content.Context
import android.graphics.Paint
import android.graphics.pdf.PdfDocument
import android.os.Environment
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*

class PdfRepository(private val context: Context) {

    companion object {
        private const val PDF_DIR = "ListManager_PDFs"
        private const val PAGE_WIDTH = 595 // A4 width in points
        private const val PAGE_HEIGHT = 842 // A4 height in points
        private const val MARGIN = 50f
    }

    suspend fun upsertDistributorPdf(
        distributorName: String,
        sessionDate: Long,
        items: List<PdfItem>
    ): File = withContext(Dispatchers.IO) {

        // Create PDF document
        val pdfDocument = PdfDocument()
        val pageInfo = PdfDocument.PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, 1).create()
        val page = pdfDocument.startPage(pageInfo)
        val canvas = page.canvas

        // Paint objects
        val titlePaint = Paint().apply {
            textSize = 24f
            isFakeBoldText = true
        }

        val headerPaint = Paint().apply {
            textSize = 16f
            isFakeBoldText = true
        }

        val bodyPaint = Paint().apply {
            textSize = 12f
        }

        val smallPaint = Paint().apply {
            textSize = 10f
            color = android.graphics.Color.GRAY
        }

        var yPosition = MARGIN + 30

        // === HEADER SECTION ===
        // Title
        canvas.drawText("Order List", MARGIN, yPosition, titlePaint)
        yPosition += 40

        // Distributor name
        canvas.drawText("Distributor: $distributorName", MARGIN, yPosition, headerPaint)
        yPosition += 25

        // Date
        val dateFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale.getDefault())
        canvas.drawText("Date: ${dateFormat.format(Date(sessionDate))}", MARGIN, yPosition, bodyPaint)
        yPosition += 30

        // Separator line
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, bodyPaint)
        yPosition += 30

        // === TABLE HEADER ===
        canvas.drawText("Qty", MARGIN, yPosition, headerPaint)
        canvas.drawText("Product", MARGIN + 80, yPosition, headerPaint)
        canvas.drawText("Size/Type", MARGIN + 300, yPosition, headerPaint)
        yPosition += 5

        // Header underline
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, bodyPaint)
        yPosition += 25

        // === TABLE BODY ===
        items.forEach { item ->
            // Check if we need a new page
            if (yPosition > PAGE_HEIGHT - 100) {
                pdfDocument.finishPage(page)
                val newPageInfo = PdfDocument.PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, 1).create()
                val newPage = pdfDocument.startPage(newPageInfo)
                yPosition = MARGIN + 30
            }

            // Quantity
            canvas.drawText("${item.quantity}", MARGIN, yPosition, bodyPaint)

            // Product name
            canvas.drawText(item.productName, MARGIN + 80, yPosition, bodyPaint)

            // Size/Barcode (optional)
            if (item.size != null) {
                canvas.drawText(item.size, MARGIN + 300, yPosition, bodyPaint)
            }

            yPosition += 20
        }

        yPosition += 30

        // === FOOTER ===
        // Total items
        canvas.drawLine(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition, bodyPaint)
        yPosition += 20

        val totalItems = items.sumOf { it.quantity }
        canvas.drawText("Total Items: $totalItems", MARGIN, yPosition, headerPaint)
        yPosition += 30

        // Footer text
        canvas.drawText(
            "Generated by List Manager App",
            MARGIN,
            PAGE_HEIGHT - MARGIN,
            smallPaint
        )

        pdfDocument.finishPage(page)

        // === SAVE TO FILE ===
        val fileName = "Order_${distributorName.replace(" ", "_")}_${System.currentTimeMillis()}.pdf"
        val file = File(getPdfDirectory(), fileName)

        FileOutputStream(file).use { outputStream ->
            pdfDocument.writeTo(outputStream)
        }

        pdfDocument.close()

        return@withContext file
    }

    /**
     * Get or create the PDF directory
     */
    private fun getPdfDirectory(): File {
        val directory = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
            PDF_DIR
        )

        if (!directory.exists()) {
            directory.mkdirs()
        }

        return directory
    }

    /**
     * Get all generated PDFs
     */
    suspend fun getAllPdfs(): List<File> = withContext(Dispatchers.IO) {
        val directory = getPdfDirectory()
        directory.listFiles()?.sortedByDescending { it.lastModified() }?.toList() ?: emptyList()
    }
}

/**
 * Data class for PDF items
 */
data class PdfItem(
    val productName: String,
    val quantity: Int,
    val size: String? = null,
    val barcode: String? = null
)

// livekit - de notat